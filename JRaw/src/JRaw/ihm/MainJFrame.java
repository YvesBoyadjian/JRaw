/*
 * MainJFrame.java
 *
 * Created on 1 novembre 2007, 12:31
 */

package JRaw.ihm;

import JRaw.BlinkingTask;
import JRaw.FileDropTarget;
import JRaw.GraphicTools;
import JRaw.LoadedImageI;
import JRaw.MainApplication;
import JRaw.WhiteBalance.WhiteBalance;
import dcraw.RawReader;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.lang.ref.WeakReference;
import java.util.Date;
import java.util.Locale;
import java.util.Timer;
import javax.swing.*;

/**
 *
 * @author  Yves
 */
public class MainJFrame extends javax.swing.JFrame implements MouseMotionListener, MouseListener, LoadedImageI, Runnable {
    
    static final int BOTH = 0;
    static final int EAST = 1;
    static final int SOUTH = 2;
    
    public GraphicPanel graphicPanel;
    boolean viewportviewset = false;
    Point p;
    int start_x_val;
    int start_y_val;
    
    private WeakReference<RawReader> loadedRaw = new WeakReference<RawReader>(null);
    
    private int buttonState = BOTH;
    boolean highlight = false;
    Timer timer = null;
    boolean blink =false;

    MainApplication parent;
    BufferedImage image;
    CalibrationFrame frame;
    
    ButtonGroup wb_bg = new ButtonGroup();
    
    /** Creates new form MainJFrame */
    public MainJFrame(MainApplication parentArg) {
        parent = parentArg;
                
        if ( parent.fullScreen) {
            setUndecorated(true);
        }
        
        initComponents();

        RawReader rr = parent.getRawReader(parent.getDisplayedIndex(), false);
            if ( rr != null)
                if (  rr.hasFinished()) {
                    if ( rr.getLoadedImage() == null)
                        rr.computeLoadedImage();
                    setLoadedImage( parent.getDisplayedIndex());
                }
        graphicPanel = new GraphicPanel(this, highlight);
        
        setFocusable(true);

        /*
        red = 1.0f;
        green = 0.51f;
        blue = 1.0f;
          */
        requestFocus();
        
        //updateInterface();
        afficheImage(true);
        //setTitle("JRaw");
        imageScrollPane.addMouseMotionListener(this); 
        imageScrollPane.addMouseListener(this);
        
        getContentPane().addKeyListener(parent);
        imageScrollPane.addKeyListener(parent);
        graphicPanel.addKeyListener(parent);
        
        addKeyListener(parent);
        
        ajusterToggleButton.addKeyListener(parent);
        batchButton.addKeyListener(parent);
        exporterButton.addKeyListener(parent);
        ouvrirButton.addKeyListener(parent);
        quitterButton.addKeyListener(parent);
        suivantButton.addKeyListener(parent);
        highlightButton.addKeyListener(parent);
        gaucheButton.addKeyListener(parent);
        droiteButton.addKeyListener(parent);
        expoPlusButton.addKeyListener(parent);
        expoMoinsButton.addKeyListener(parent);
        
        ajusterToggleButton1.addKeyListener(parent);
        batchButton1.addKeyListener(parent);
        exporterButton1.addKeyListener(parent);
        ouvrirButton1.addKeyListener(parent);
        quitterButton1.addKeyListener(parent);
        suivantButton1.addKeyListener(parent);
        highlightButton1.addKeyListener(parent);
        gaucheButton1.addKeyListener(parent);
        droiteButton1.addKeyListener(parent);
        expoPlusButton1.addKeyListener(parent);
        expoMoinsButton1.addKeyListener(parent);
        
        ajusterToggleButton.setSelected(parent.isFitted);
        ajusterToggleButton1.setSelected(parent.isFitted);

        //buttonEast();
        //getContentPane().remove(jPanel1);
        if ( parent.fullScreen) {
            setJMenuBar(null);
            imageScrollPane.setBorder(null);
        }
        
        if ( getLoadedRaw() == null)
            buttonSouth();
        
        if ( parent.nb_cores == 1)
            cores1MenuItem.setSelected(true);
        if ( parent.nb_cores == 2)
            cores2MenuItem.setSelected(true);
        if ( parent.nb_cores == 3)
            cores3MenuItem.setSelected(true);
        if ( parent.nb_cores == 4)
            cores4MenuItem.setSelected(true);
        if ( parent.nb_cores == 8)
            cores8MenuItem.setSelected(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelEast = new javax.swing.JPanel();
        ouvrirButton = new javax.swing.JButton();
        exporterButton = new javax.swing.JButton();
        quitterButton = new javax.swing.JButton();
        batchButton = new javax.swing.JButton();
        ajusterToggleButton = new javax.swing.JToggleButton();
        suivantButton = new javax.swing.JButton();
        highlightButton = new javax.swing.JToggleButton();
        gaucheButton = new javax.swing.JButton();
        droiteButton = new javax.swing.JButton();
        expoPlusButton = new javax.swing.JButton();
        expoMoinsButton = new javax.swing.JButton();
        imageScrollPane = new javax.swing.JScrollPane();
        jPanelSouth = new javax.swing.JPanel();
        ouvrirButton1 = new javax.swing.JButton();
        exporterButton1 = new javax.swing.JButton();
        suivantButton1 = new javax.swing.JButton();
        ajusterToggleButton1 = new javax.swing.JToggleButton();
        batchButton1 = new javax.swing.JButton();
        quitterButton1 = new javax.swing.JButton();
        highlightButton1 = new javax.swing.JToggleButton();
        gaucheButton1 = new javax.swing.JButton();
        droiteButton1 = new javax.swing.JButton();
        expoPlusButton1 = new javax.swing.JButton();
        expoMoinsButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fichierMenu = new javax.swing.JMenu();
        ouvrirMenuItem = new javax.swing.JMenuItem();
        batchMenuItem = new javax.swing.JMenuItem();
        exporterMenuItem = new javax.swing.JMenuItem();
        calibrationMenuItem = new javax.swing.JMenuItem();
        calibration2MenuItem = new javax.swing.JMenuItem();
        quitterMenuItem = new javax.swing.JMenuItem();
        multicoreMenu = new javax.swing.JMenu();
        cores1MenuItem = new javax.swing.JRadioButtonMenuItem();
        cores2MenuItem = new javax.swing.JRadioButtonMenuItem();
        cores3MenuItem = new javax.swing.JRadioButtonMenuItem();
        cores4MenuItem = new javax.swing.JRadioButtonMenuItem();
        cores8MenuItem = new javax.swing.JRadioButtonMenuItem();
        compressionMenu = new javax.swing.JMenu();
        stockageCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        internetCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        constantSizeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        PNGCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        PNGX2CheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        PNGX4CheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        PNGX8CheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        whiteBalanceMenu = new javax.swing.JMenu();
        ajouterMenuItem = new javax.swing.JMenuItem();
        aideMenu = new javax.swing.JMenu();
        modeEmploiMenuItem = new javax.swing.JMenuItem();
        aProposMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelEast.setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("JRaw/jraw"); // NOI18N
        ouvrirButton.setText(bundle.getString("ouvrir")); // NOI18N
        ouvrirButton.setToolTipText(bundle.getString("ouvrir_tooltip")); // NOI18N
        ouvrirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(ouvrirButton, gridBagConstraints);

        exporterButton.setText(bundle.getString("exporter")); // NOI18N
        exporterButton.setToolTipText(bundle.getString("exporter_tooltip")); // NOI18N
        exporterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 1.0;
        jPanelEast.add(exporterButton, gridBagConstraints);

        quitterButton.setText(bundle.getString("quitter")); // NOI18N
        quitterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(quitterButton, gridBagConstraints);

        batchButton.setText("Batch...");
        batchButton.setToolTipText(bundle.getString("batch_tooltip")); // NOI18N
        batchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(batchButton, gridBagConstraints);

        ajusterToggleButton.setText(bundle.getString("ajuster")); // NOI18N
        ajusterToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajusterToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(ajusterToggleButton, gridBagConstraints);

        suivantButton.setText(bundle.getString("suivant")); // NOI18N
        suivantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suivantButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(suivantButton, gridBagConstraints);

        highlightButton.setText(bundle.getString("haut_lum")); // NOI18N
        highlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(highlightButton, gridBagConstraints);

        gaucheButton.setText(bundle.getString("gauche")); // NOI18N
        gaucheButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaucheButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(gaucheButton, gridBagConstraints);

        droiteButton.setText(bundle.getString("droite")); // NOI18N
        droiteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                droiteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(droiteButton, gridBagConstraints);

        expoPlusButton.setText("expo +");
        expoPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expoPlusButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(expoPlusButton, gridBagConstraints);

        expoMoinsButton.setText("expo -");
        expoMoinsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expoMoinsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelEast.add(expoMoinsButton, gridBagConstraints);

        getContentPane().add(jPanelEast, java.awt.BorderLayout.EAST);
        getContentPane().add(imageScrollPane, java.awt.BorderLayout.CENTER);

        jPanelSouth.setLayout(new java.awt.GridBagLayout());

        ouvrirButton1.setText(bundle.getString("ouvrir")); // NOI18N
        ouvrirButton1.setToolTipText(bundle.getString("ouvrir_tooltip")); // NOI18N
        ouvrirButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSouth.add(ouvrirButton1, gridBagConstraints);

        exporterButton1.setText(bundle.getString("exporter")); // NOI18N
        exporterButton1.setToolTipText(bundle.getString("exporter_tooltip")); // NOI18N
        exporterButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporterButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanelSouth.add(exporterButton1, gridBagConstraints);

        suivantButton1.setText(bundle.getString("suivant")); // NOI18N
        suivantButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suivantButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSouth.add(suivantButton1, gridBagConstraints);

        ajusterToggleButton1.setText(bundle.getString("ajuster")); // NOI18N
        ajusterToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajusterToggleButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSouth.add(ajusterToggleButton1, gridBagConstraints);

        batchButton1.setText("Batch...");
        batchButton1.setToolTipText(bundle.getString("batch_tooltip")); // NOI18N
        batchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSouth.add(batchButton1, gridBagConstraints);

        quitterButton1.setText(bundle.getString("quitter")); // NOI18N
        quitterButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSouth.add(quitterButton1, gridBagConstraints);

        highlightButton1.setText(bundle.getString("haut_lum")); // NOI18N
        highlightButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSouth.add(highlightButton1, gridBagConstraints);

        gaucheButton1.setText(bundle.getString("gauche")); // NOI18N
        gaucheButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaucheButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSouth.add(gaucheButton1, gridBagConstraints);

        droiteButton1.setText(bundle.getString("droite")); // NOI18N
        droiteButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                droiteButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanelSouth.add(droiteButton1, gridBagConstraints);

        expoPlusButton1.setText("expo +");
        expoPlusButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expoPlusButton1ActionPerformed(evt);
            }
        });
        jPanelSouth.add(expoPlusButton1, new java.awt.GridBagConstraints());

        expoMoinsButton1.setText("expo -");
        expoMoinsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expoMoinsButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        jPanelSouth.add(expoMoinsButton1, gridBagConstraints);

        getContentPane().add(jPanelSouth, java.awt.BorderLayout.SOUTH);

        fichierMenu.setText(bundle.getString("fichier")); // NOI18N

        ouvrirMenuItem.setText(bundle.getString("ouvrir")); // NOI18N
        ouvrirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirMenuItemActionPerformed(evt);
            }
        });
        fichierMenu.add(ouvrirMenuItem);

        batchMenuItem.setText("Batch...");
        batchMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchMenuItemActionPerformed(evt);
            }
        });
        fichierMenu.add(batchMenuItem);

        exporterMenuItem.setText(bundle.getString("exporter")); // NOI18N
        exporterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporterMenuItemActionPerformed(evt);
            }
        });
        fichierMenu.add(exporterMenuItem);

        calibrationMenuItem.setText("Calibration...");
        calibrationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calibrationMenuItemActionPerformed(evt);
            }
        });
        fichierMenu.add(calibrationMenuItem);

        calibration2MenuItem.setText("Calibration ( suite)");
        calibration2MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calibration2MenuItemActionPerformed(evt);
            }
        });
        fichierMenu.add(calibration2MenuItem);

        quitterMenuItem.setText(bundle.getString("quitter")); // NOI18N
        quitterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterMenuItemActionPerformed(evt);
            }
        });
        fichierMenu.add(quitterMenuItem);

        jMenuBar1.add(fichierMenu);

        multicoreMenu.setText(bundle.getString("nombre_de_cores")); // NOI18N

        buttonGroup1.add(cores1MenuItem);
        cores1MenuItem.setText("1 core");
        cores1MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cores1MenuItemActionPerformed(evt);
            }
        });
        multicoreMenu.add(cores1MenuItem);

        buttonGroup1.add(cores2MenuItem);
        cores2MenuItem.setText("2 cores");
        cores2MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cores2MenuItemActionPerformed(evt);
            }
        });
        multicoreMenu.add(cores2MenuItem);

        buttonGroup1.add(cores3MenuItem);
        cores3MenuItem.setText("3 cores");
        cores3MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cores3MenuItemActionPerformed(evt);
            }
        });
        multicoreMenu.add(cores3MenuItem);

        buttonGroup1.add(cores4MenuItem);
        cores4MenuItem.setText("4 cores");
        cores4MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cores4MenuItemActionPerformed(evt);
            }
        });
        multicoreMenu.add(cores4MenuItem);

        buttonGroup1.add(cores8MenuItem);
        cores8MenuItem.setText("8 cores");
        cores8MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cores8MenuItemActionPerformed(evt);
            }
        });
        multicoreMenu.add(cores8MenuItem);

        jMenuBar1.add(multicoreMenu);

        compressionMenu.setText("Compression");

        stockageCheckBoxMenuItem.setText(bundle.getString("stockage")); // NOI18N
        stockageCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockageCheckBoxMenuItemActionPerformed(evt);
            }
        });
        compressionMenu.add(stockageCheckBoxMenuItem);

        internetCheckBoxMenuItem.setText(bundle.getString("internet")); // NOI18N
        internetCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                internetCheckBoxMenuItemActionPerformed(evt);
            }
        });
        compressionMenu.add(internetCheckBoxMenuItem);

        constantSizeCheckBoxMenuItem.setText(bundle.getString("ConstantSize")); // NOI18N
        constantSizeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constantSizeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        compressionMenu.add(constantSizeCheckBoxMenuItem);

        PNGCheckBoxMenuItem.setText(bundle.getString("PNG")); // NOI18N
        PNGCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PNGCheckBoxMenuItemActionPerformed(evt);
            }
        });
        compressionMenu.add(PNGCheckBoxMenuItem);

        PNGX2CheckBoxMenuItem.setText(bundle.getString("PNGX2")); // NOI18N
        PNGX2CheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PNGX2CheckBoxMenuItemActionPerformed(evt);
            }
        });
        compressionMenu.add(PNGX2CheckBoxMenuItem);

        PNGX4CheckBoxMenuItem.setText(bundle.getString("PNGX4")); // NOI18N
        PNGX4CheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PNGX4CheckBoxMenuItemActionPerformed(evt);
            }
        });
        compressionMenu.add(PNGX4CheckBoxMenuItem);

        PNGX8CheckBoxMenuItem.setText(bundle.getString("PNGX8")); // NOI18N
        PNGX8CheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PNGX8CheckBoxMenuItemActionPerformed(evt);
            }
        });
        compressionMenu.add(PNGX8CheckBoxMenuItem);

        jMenuBar1.add(compressionMenu);

        whiteBalanceMenu.setText(bundle.getString("white_balance")); // NOI18N

        ajouterMenuItem.setText(bundle.getString("ajouter")); // NOI18N
        ajouterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterMenuItemActionPerformed(evt);
            }
        });
        whiteBalanceMenu.add(ajouterMenuItem);

        jMenuBar1.add(whiteBalanceMenu);

        aideMenu.setText(bundle.getString("aide")); // NOI18N

        modeEmploiMenuItem.setText(bundle.getString("mode_d_emploi")); // NOI18N
        modeEmploiMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeEmploiMenuItemActionPerformed(evt);
            }
        });
        aideMenu.add(modeEmploiMenuItem);

        aProposMenuItem.setText(bundle.getString("a_propos")); // NOI18N
        aProposMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aProposMenuItemActionPerformed(evt);
            }
        });
        aideMenu.add(aProposMenuItem);

        jMenuBar1.add(aideMenu);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1024)/2, (screenSize.height-750)/2, 1024, 750);
    }// </editor-fold>//GEN-END:initComponents

    private void expoMoinsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expoMoinsButton1ActionPerformed
// add your handling code here:
        expoMoins();
    }//GEN-LAST:event_expoMoinsButton1ActionPerformed

    private void expoPlusButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expoPlusButton1ActionPerformed
// add your handling code here:
        expoPlus();
    }//GEN-LAST:event_expoPlusButton1ActionPerformed

    private void expoMoinsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expoMoinsButtonActionPerformed
// add your handling code here:
        expoMoins();
    }//GEN-LAST:event_expoMoinsButtonActionPerformed

    private void expoPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expoPlusButtonActionPerformed
// add your handling code here:
        expoPlus();
    }//GEN-LAST:event_expoPlusButtonActionPerformed

    private void cores8MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cores8MenuItemActionPerformed
// add your handling code here:
        setNbCores(8);
    }//GEN-LAST:event_cores8MenuItemActionPerformed

    private void cores4MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cores4MenuItemActionPerformed
// add your handling code here:
        setNbCores(4);
    }//GEN-LAST:event_cores4MenuItemActionPerformed

    private void cores2MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cores2MenuItemActionPerformed
// add your handling code here:
        setNbCores(2);
    }//GEN-LAST:event_cores2MenuItemActionPerformed

    private void cores1MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cores1MenuItemActionPerformed
// add your handling code here:
        setNbCores(1);
    }//GEN-LAST:event_cores1MenuItemActionPerformed

    private void droiteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_droiteButtonActionPerformed
// add your handling code here:
        droite();
    }//GEN-LAST:event_droiteButtonActionPerformed

    private void gaucheButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaucheButtonActionPerformed
// add your handling code here:
        gauche();
    }//GEN-LAST:event_gaucheButtonActionPerformed

    private void droiteButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_droiteButton1ActionPerformed
// add your handling code here:
        droite();
    }//GEN-LAST:event_droiteButton1ActionPerformed

    private void gaucheButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaucheButton1ActionPerformed
// add your handling code here:
        gauche();
    }//GEN-LAST:event_gaucheButton1ActionPerformed

    private void highlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightButtonActionPerformed
// add your handling code here:
        highlight();
    }//GEN-LAST:event_highlightButtonActionPerformed

    private void highlightButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightButton1ActionPerformed
// add your handling code here:
        highlight();
    }//GEN-LAST:event_highlightButton1ActionPerformed

    private void suivantButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suivantButton1ActionPerformed
// add your handling code here:
        parent.suivant();
    }//GEN-LAST:event_suivantButton1ActionPerformed

    private void ajusterToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajusterToggleButton1ActionPerformed
// add your handling code here:        
        parent.isFitted = ajusterToggleButton1.isSelected();
        afficheImage(false);
    }//GEN-LAST:event_ajusterToggleButton1ActionPerformed

    private void batchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchButton1ActionPerformed
// add your handling code here:
        parent.batch();
    }//GEN-LAST:event_batchButton1ActionPerformed

    private void quitterButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterButton1ActionPerformed
// add your handling code here:
        parent.quitter();
    }//GEN-LAST:event_quitterButton1ActionPerformed

    private void exporterButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporterButton1ActionPerformed
// add your handling code here:
        parent.exporter(true);
    }//GEN-LAST:event_exporterButton1ActionPerformed

    private void ouvrirButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirButton1ActionPerformed
// add your handling code here:
        parent.ouvrir();
    }//GEN-LAST:event_ouvrirButton1ActionPerformed

    private void modeEmploiMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeEmploiMenuItemActionPerformed
// add your handling code here:
        modeEmploi();
    }//GEN-LAST:event_modeEmploiMenuItemActionPerformed

    private void suivantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suivantButtonActionPerformed
// add your handling code here:
        parent.suivant();
    }//GEN-LAST:event_suivantButtonActionPerformed

    private void ajusterToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajusterToggleButtonActionPerformed
// add your handling code here:
        parent.isFitted = ajusterToggleButton.isSelected();
        afficheImage(false);
    }//GEN-LAST:event_ajusterToggleButtonActionPerformed

    private void batchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchButtonActionPerformed
// add your handling code here:
        parent.batch();
    }//GEN-LAST:event_batchButtonActionPerformed

    private void batchMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchMenuItemActionPerformed
// add your handling code here:
        parent.batch();
    }//GEN-LAST:event_batchMenuItemActionPerformed

    private void quitterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterButtonActionPerformed
// add your handling code here:
        parent.quitter();
    }//GEN-LAST:event_quitterButtonActionPerformed

    private void exporterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporterButtonActionPerformed
// add your handling code here:
        parent.exporter(true);
    }//GEN-LAST:event_exporterButtonActionPerformed

    private void ouvrirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirButtonActionPerformed
// add your handling code here:
        parent.ouvrir();
    }//GEN-LAST:event_ouvrirButtonActionPerformed

    private void aProposMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aProposMenuItemActionPerformed
// add your handling code here:
        aPropos();
    }//GEN-LAST:event_aProposMenuItemActionPerformed

    private void quitterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterMenuItemActionPerformed
// add your handling code here:
        parent.quitter();
    }//GEN-LAST:event_quitterMenuItemActionPerformed

    private void exporterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporterMenuItemActionPerformed
// add your handling code here:
        parent.exporter(true);
    }//GEN-LAST:event_exporterMenuItemActionPerformed

    private void ouvrirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirMenuItemActionPerformed
// add your handling code here:
        parent.ouvrir();
    }//GEN-LAST:event_ouvrirMenuItemActionPerformed

private void stockageCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockageCheckBoxMenuItemActionPerformed
    parent.quality = parent.STOCKAGE_QUALITY;
    updateInterface();
}//GEN-LAST:event_stockageCheckBoxMenuItemActionPerformed

private void internetCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_internetCheckBoxMenuItemActionPerformed
    parent.quality = parent.INTERNET_QUALITY;
    updateInterface();
}//GEN-LAST:event_internetCheckBoxMenuItemActionPerformed

private void calibrationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibrationMenuItemActionPerformed
// add your handling code here:
    calibration();
}//GEN-LAST:event_calibrationMenuItemActionPerformed

private void calibration2MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibration2MenuItemActionPerformed
// add your handling code here:
    calibration2();
}//GEN-LAST:event_calibration2MenuItemActionPerformed

private void constantSizeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constantSizeCheckBoxMenuItemActionPerformed
    parent.quality = parent.CONSTANT_SIZE_QUALITY;
    updateInterface();
}//GEN-LAST:event_constantSizeCheckBoxMenuItemActionPerformed

private void PNGCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PNGCheckBoxMenuItemActionPerformed
    parent.quality = parent.PNG_QUALITY;
    updateInterface();
}//GEN-LAST:event_PNGCheckBoxMenuItemActionPerformed

private void PNGX2CheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PNGX2CheckBoxMenuItemActionPerformed
    parent.quality = parent.PNG_X2_QUALITY;
    updateInterface();
}//GEN-LAST:event_PNGX2CheckBoxMenuItemActionPerformed

private void PNGX4CheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PNGX4CheckBoxMenuItemActionPerformed
    parent.quality = parent.PNG_X4_QUALITY;
    updateInterface();
}//GEN-LAST:event_PNGX4CheckBoxMenuItemActionPerformed

private void PNGX8CheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PNGX8CheckBoxMenuItemActionPerformed
    parent.quality = parent.PNG_X8_QUALITY;
    updateInterface();
}//GEN-LAST:event_PNGX8CheckBoxMenuItemActionPerformed

private void ajouterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterMenuItemActionPerformed
    ajouterBalanceDesBlancs();
}//GEN-LAST:event_ajouterMenuItemActionPerformed

private void cores3MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cores3MenuItemActionPerformed
    // add your handling code here:
        setNbCores(3);
}//GEN-LAST:event_cores3MenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        parent.onClosing();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        parent.onClosed();
    }//GEN-LAST:event_formWindowClosed
    

private void ajouterBalanceDesBlancs() {

    RawReader rr = getLoadedRaw();

    if ( rr==null)
        return;

    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("JRaw/jraw"); // NOI18N
    String inputName = bundle.getString("entrerNom"); // NOI18N

    String name = JOptionPane.showInputDialog(inputName);
    if ( name == null || name.equals("")) {
        return;
    }

    getParentApplication().wbf.addWhiteBalance(name, rr.getRed(), rr.getGreen(), rr.getBlue());
    updateInterface();
}

    public MainApplication getParentApplication() {
        return parent;
    }
    
    
    public void quitter() {
            setVisible( false);
            dispose();
    }

    public void aPropos() {
        AProposJFrame frame = new AProposJFrame(this);
        frame.setLocationByPlatform(true);
//        frame.setAlwaysOnTop(true);
        frame.setVisible(true);

    }
    
    public void modeEmploi() {
        Locale locale = Locale.getDefault();
        JDialog frame = null;
        if ( locale.getLanguage().equals("fr")) {
            frame = new ModeEmploiJFrame(this);
        }
        else {
            frame = new InstructionsForUseJFrame(this);
        }
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }


    public void afficheImage(boolean invalidate) {

        //System.out.println("repere 300");
        RawReader rr = getLoadedRaw();
        //System.out.println("repere 301");

        if ( parent.isFitted) {
        //System.out.println("repere 302");
            graphicPanel.setPreferredSize(new Dimension( 1, 1));
            imageScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            imageScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        }
        else {
        //System.out.println("repere 303");
            if ( rr != null)
                if ( rr.getLoadedImage() != null) {
        //System.out.println("repere 304");
                    graphicPanel.setPreferredSize(new Dimension(rr.getLoadedImage().getWidth(), rr.getLoadedImage().getHeight()));
        //System.out.println("repere 305");
                }
        //System.out.println("repere 306");
            imageScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            imageScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        //System.out.println("repere 307");
        }
        //System.out.println("repere 308");
        if ( !viewportviewset) {
            imageScrollPane.setViewportView( graphicPanel);
            viewportviewset =true;
        }
        else {
            if ( invalidate)
                graphicPanel.invalidateImage();
            graphicPanel.repaint();
        }
        //System.out.println("repere 309");
        imageScrollPane.setDropTarget( new FileDropTarget(this));
        if ( rr != null) {
            if ( rr.hasAutoWB()) {
                getParentApplication().current_white = getParentApplication().wbf.getNullWhiteBalance();
            }
            else {
                getParentApplication().current_white = getParentApplication().wbf.getWhiteBalance( rr.getRed(), rr.getGreen(), rr.getBlue());
            }
        }
        //System.out.println("repere 310");
        //System.out.println("repere 311");

        if ( parent.getDisplayedIndex() == -1)
            setTitle("JRaw");
        else
            setTitle("JRaw - "+ parent.allFilesInDirectory[parent.getDisplayedIndex()].getPath());

        SwingUtilities.invokeLater( new Runnable() {
            public void run() {
                updateInterface(); 
                triggerScaledImage();
            }
        });
        
        //requestFocus();
    }


    
    public void triggerScaledImage() {
                int nextRawIndex = parent.getNextRawIndex(parent.getDisplayedIndex());
                
                if ( graphicPanel.nextIndex == nextRawIndex) {
                    return;
                }
                SwingUtilities.invokeLater( new Runnable() {
                    
                public void run() {
                Thread it = new Thread() {
                    public void run() {
                        yield();
                        int nextRawIndex = parent.getNextRawIndex(parent.getDisplayedIndex());
                        RawReader nrr = parent.getRawReader(nextRawIndex, false);
                        if ( nrr != null && nrr.hasFinished()) {
                            Image viewingImage = nrr.getLoadedImage();
                            int image_width = viewingImage.getWidth(null);
                            int image_height = viewingImage.getHeight(null);

                            Rectangle rect = GraphicTools.computeImageBounds( image_width, image_height, graphicPanel.getWidth(), graphicPanel.getHeight());

                            Image si = nrr.getLoadedImage().getScaledInstance( rect.width, rect.height, Image.SCALE_AREA_AVERAGING);
                            BufferedImage bi = new BufferedImage(si.getWidth(null),si.getHeight(null),BufferedImage.TYPE_INT_RGB);
                            bi.createGraphics().drawImage(si, 0, 0, null);
                            graphicPanel.setNextIndexScaledImage(bi, nextRawIndex);
                            
                        }
                    }
                };
                it.setPriority(Thread.MIN_PRIORITY);
                it.start();        
                }});
    }

    // Ne pas mettre cette methode en synchronized, ca cree un deadlock
    public synchronized void updateInterface() {

        //System.out.println("repere 400");

        RawReader rr = getLoadedRaw();
        updateInterface2(rr);
    }
    public void updateInterface2(RawReader rr) {
        //System.out.println("repere 401");

        boolean enableExporter = parent.getDisplayedIndex() != -1 && rr != null && rr.getLoadedImage() != null && !parent.batchMode;
        
        exporterMenuItem.setEnabled(enableExporter);
        exporterButton.setEnabled(enableExporter);
        exporterButton1.setEnabled(enableExporter);
        
        //System.out.println("repere 402");

        boolean enableOuvrir = !parent.batchMode;
        
        ouvrirMenuItem.setEnabled(enableOuvrir);
        ouvrirButton.setEnabled(enableOuvrir);
        ouvrirButton1.setEnabled(enableOuvrir);
        
        boolean enableBatch = !parent.batchMode;
        
        batchMenuItem.setEnabled(enableBatch);
        batchButton.setEnabled(enableBatch);
        batchButton1.setEnabled(enableBatch);
        
        boolean enableSuivant = !parent.batchMode && !parent.disableSuivant && parent.getDisplayedIndex() != -1;
        
        suivantButton.setEnabled(enableSuivant);
        suivantButton1.setEnabled(enableSuivant);
        
        highlightButton.setSelected(highlight);
        highlightButton1.setSelected(highlight);
        
        boolean enableGauche = ( rr != null) && ( rr.hasFinished()) && ( rr.getOrientation() > RawReader.GAUCHE);
        
        gaucheButton.setEnabled(enableGauche);
        gaucheButton1.setEnabled(enableGauche);
        
        boolean enableDroit = ( rr != null) && ( rr.hasFinished()) && ( rr.getOrientation() < RawReader.DROIT);
        
        droiteButton.setEnabled(enableDroit);
        droiteButton1.setEnabled(enableDroit);

        //System.out.println("repere 403");

        boolean enableExpoPlus = ( rr != null) && ( rr.hasFinished());
        
        expoPlusButton.setEnabled(enableExpoPlus);
        expoPlusButton1.setEnabled(enableExpoPlus);

        boolean enableExpoMoins = ( rr != null) && ( rr.hasFinished()) && rr.getEv() > 0.0;
        
        expoMoinsButton.setEnabled(enableExpoMoins);
        expoMoinsButton1.setEnabled(enableExpoMoins);

        if ( parent.isFitted == false) {
            imageScrollPane.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        }
        else
            imageScrollPane.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        
        //System.out.println("repere 404");

        stockageCheckBoxMenuItem.setSelected( parent.quality == parent.STOCKAGE_QUALITY);
        internetCheckBoxMenuItem.setSelected( parent.quality == parent.INTERNET_QUALITY);
        constantSizeCheckBoxMenuItem.setSelected( parent.quality == parent.CONSTANT_SIZE_QUALITY);
        PNGCheckBoxMenuItem.setSelected( parent.quality == parent.PNG_QUALITY);
        PNGX2CheckBoxMenuItem.setSelected( parent.quality == parent.PNG_X2_QUALITY);
        PNGX4CheckBoxMenuItem.setSelected( parent.quality == parent.PNG_X4_QUALITY);
        PNGX8CheckBoxMenuItem.setSelected( parent.quality == parent.PNG_X8_QUALITY);

        updateWhiteBalanceMenu();

        //System.out.println("repere 407");

        boolean fileAlreadyExists = false;

        File outputFile = parent.getOutputFile();

        if ( outputFile == null) {
            exporterButton.setBackground( null);
            exporterButton1.setBackground( null);
            return;
        }

        //System.out.println("repere 408");

        fileAlreadyExists = outputFile.exists();

        Color red = new Color(1.0f, 0.5f, 0.5f);
        Color green = new Color(0.5f,1.0f,0.5f);

        if ( fileAlreadyExists) {
            exporterButton.setBackground( red);
            exporterButton1.setBackground( red);
        }
        else {
            exporterButton.setBackground( green);
            exporterButton1.setBackground( green);
        }
    }
    
    public void updateWhiteBalanceMenu() {
        
        while ( whiteBalanceMenu.getItemCount() > 1) {
            whiteBalanceMenu.remove(whiteBalanceMenu.getItemCount()-1);
        }
        wb_bg = new ButtonGroup();
        
        //System.out.println("repere 405");

        WhiteBalance wbd = getParentApplication().wbf.getNullWhiteBalance();
        JRadioButtonMenuItem jcbmid = new JRadioButtonMenuItem(wbd.getName());
        jcbmid.addActionListener(new WhiteBalanceActionListener(wbd, this));
        whiteBalanceMenu.add(jcbmid);
        wb_bg.add(jcbmid);
            if ( wbd == parent.current_white) {
                jcbmid.setSelected(true);
            }
        //System.out.println("repere 406");

        for ( WhiteBalance wb: getParentApplication().wbf.getVector()) {
            JRadioButtonMenuItem jcbmi = new JRadioButtonMenuItem(wb.getName());
            jcbmi.addActionListener(new WhiteBalanceActionListener(wb, this));
            whiteBalanceMenu.add(jcbmi);
            wb_bg.add(jcbmi); 
            if ( wb == parent.current_white) {
                jcbmi.setSelected(true);
            }
        }
    }
    
    public void setNextRawColor() {
        Color red = new Color(1.0f, 0.5f, 0.5f);
        Color green = new Color(0.5f,1.0f,0.5f);

        if ( nextRawIsReady()) {
            suivantButton.setBackground(green);
            suivantButton1.setBackground(green);
        }
        else {
            suivantButton.setBackground(red);
            suivantButton1.setBackground(red);
        }
        //System.out.println("repere 409");

}
    public boolean nextRawIsReady() {
        RawReader rr = getParentApplication().getRawReader(getParentApplication().getNextRawIndex(getParentApplication().getDisplayedIndex()), false);

        if ( rr == null)
            return false;

        if ( !rr.hasFinished()) {
            return false;
        }

        return true;
    }
    
    public void updateImage() {
        imageScrollPane.repaint();
    }
    
    public void mouseDragged(MouseEvent e) {
        if ( p == null) {
            p = e.getPoint();
            start_x_val = imageScrollPane.getHorizontalScrollBar().getValue();
            start_y_val = imageScrollPane.getVerticalScrollBar().getValue();
            return;
        }
        Point np = e.getPoint();
        
        int dx = np.x - p.x;
        int dy = np.y - p.y;
        
        //System.out.printf("dx = %d, dy = %d \n", dx, dy);
        imageScrollPane.getHorizontalScrollBar().setValue(start_x_val - 3 *dx);
        imageScrollPane.getVerticalScrollBar().setValue(start_y_val - 3 * dy);
    }
    public void mouseMoved(MouseEvent e) {
        
    }
    public void mouseClicked( MouseEvent e) {
        if( e.getClickCount() ==2) {
            if ( parent.isFullScreen()) {
                parent.setNormal();
            }
            else {
                parent.setFullScreen();
            }
        }
    }
    public void mouseEntered( MouseEvent e) {
        
    }
    public void mouseExited( MouseEvent e) {
        
    }
    public void mousePressed( MouseEvent e) {
        p = e.getPoint();
        start_x_val = imageScrollPane.getHorizontalScrollBar().getValue();
        start_y_val = imageScrollPane.getVerticalScrollBar().getValue();
    }
    public void mouseReleased( MouseEvent e) {
        p = null;
    }
    
    public void buttonEast() {
        if ( buttonState == EAST)
            return;
        
        ajusterToggleButton.setSelected(parent.isFitted);
        ajusterToggleButton1.setSelected(parent.isFitted);

        getContentPane().remove(jPanelEast);
        getContentPane().remove(jPanelSouth);
        //getContentPane().doLayout();
        getContentPane().add(jPanelEast, java.awt.BorderLayout.EAST);
        getContentPane().doLayout();
        jPanelEast.doLayout();
        
        suivantButton.grabFocus();
        
        buttonState = EAST;
    }
    
    public void buttonSouth() {
        if ( buttonState == SOUTH)
            return;
        
        ajusterToggleButton.setSelected(parent.isFitted);
        ajusterToggleButton1.setSelected(parent.isFitted);

        getContentPane().remove(jPanelEast);
        getContentPane().remove(jPanelSouth);
        //getContentPane().doLayout();
        getContentPane().add(jPanelSouth, java.awt.BorderLayout.SOUTH);
        getContentPane().doLayout();
        jPanelSouth.doLayout();
        
        suivantButton1.grabFocus();
        
        buttonState = SOUTH;
    }
    
    public BufferedImage getLoadedImage() {

        RawReader rr = getLoadedRaw();
        if ( rr == null)
            return null;
        
        if ( blink)
            return rr.getLoadedImageHighlight();
        else
            return rr.getLoadedImage();
    }
    
    public int getLoadedIndex() {
        RawReader rr = getLoadedRaw();
        if ( rr == null)
            return -1;
        
        return rr.getIndex();
    }
    
    public void setLoadedImage( int displayedIndex) {

        RawReader loadedRawArg = parent.getRawReader(displayedIndex, true);
        //displayedIndex = displayedIndexArg;
        /*
        if ( loadedRawArg == null) {
            RawReader rr = parent.traiteImage(displayedIndex, 2);
            if ( rr!=null) {
                rr.go();
            }
            return;
        }
        */
        loadedRaw = new WeakReference<RawReader>(loadedRawArg);
        /*
        red = loadedRawArg.getRed();
        green = loadedRawArg.getGreen();
        blue = loadedRawArg.getBlue();
        */
        //loadedImage = loadedImageArg;
        //loadedImageHighlight = null;
        
        setButtonAccordingToImage();        
    }
    
    public void setButtonAccordingToImage() {

        RawReader rr = getLoadedRaw();
        if ( rr != null)
        if ( rr.getLoadedImage() != null)
        if ( rr.getLoadedImage().getWidth() > rr.getLoadedImage().getHeight())
            buttonSouth();
        else
            buttonEast();
    }
    
    public void highlight() {
        if ( highlight) {
            timer.cancel();
            timer = null;
            highlight = false;
            graphicPanel.setHighLight(highlight);
            blink = false;
            repaint();
            updateInterface();
            return;
        }

        long mm = Runtime.getRuntime().maxMemory()/1024/1024;
        long m1 = Runtime.getRuntime().freeMemory()/1024/1024;
        long m2 = Runtime.getRuntime().totalMemory()/1024/1024;

        System.out.printf("Highlight, maxMem = %d, freeMem = %d, totalMem = %d\n", mm, m1, m2);

        RawReader rr = getLoadedRaw();
        if ( rr != null)
                if (  rr.hasFinished()) {
                    if ( rr.getLoadedImageHighlight() == null) {
                        rr.computeLoadedImageHighlight();
                    }
                }
       
        timer = new Timer();
        timer.scheduleAtFixedRate( new BlinkingTask(this),0,500);
        
        highlight = true;
        graphicPanel.setHighLight(highlight);
        updateInterface();
    }
    
    public void blink() {
        blink = !blink;

        RawReader rr = getLoadedRaw();
        if ( rr != null)
           if ( rr.getLoadedImageHighlight() == null)
               if ( rr.hasFinished())
                   rr.computeLoadedImageHighlight();
        
        repaint();
    }
    
    public void gauche() {

        RawReader rr = getLoadedRaw();
        if ( rr != null) {
           if ( rr.hasFinished()) {
               int orientation = rr.getOrientation();
               orientation--;
               if ( orientation < RawReader.GAUCHE)
                   return;
               
               rr.setOrientation(orientation);
               
               rr.computeLoadedImage();
                    rr.computeLoadedImageHighlight();
                setButtonAccordingToImage();
                afficheImage(true);
           }          
        }
    }
    
    public void droite() {
        RawReader rr = getLoadedRaw();
        if ( rr != null)
           if ( rr.hasFinished()) {
               int orientation = rr.getOrientation();
               orientation++;
               if ( orientation > RawReader.DROIT)
                   return;
               
               rr.setOrientation(orientation);
               
               rr.computeLoadedImage();
                    rr.computeLoadedImageHighlight();
                setButtonAccordingToImage();
                afficheImage(true);
           }
    }
    
    public void expoPlus() {
        
        RawReader rr = getLoadedRaw();

        if ( rr != null) {
           if ( rr.hasFinished()) {
               
               float ev = rr.getEv();
               
               ev += 1.0/3.0;
               
               rr.setEv( ev);

               Date start = new Date();
               rr.computeLoadedImage();
               System.out.println("expoPlus.computeLoaded");
                    //getLoadedRaw().computeLoadedImageHighlight();
               rr.invalidateLoadedImageHighLight();
               System.out.println("expoPlus.computeLoadedHightLight");
                setButtonAccordingToImage();
                afficheImage(true);
               System.out.println("expoPlus.afficheImage");
               Date end = new Date();

               double nb_seconds = (end.getTime() - start.getTime())/1000.0f;
               System.out.printf("Delta time = %f sec", nb_seconds);
           }          
        }
    }
    
    public void expoMoins() {
        
        RawReader rr = getLoadedRaw();

        if ( rr != null) {
           if ( rr.hasFinished()) {
               
               float ev = rr.getEv();
               
               ev -= 1.0/3.0;
               
               rr.setEv( ev);
               
               rr.computeLoadedImage();
               rr.invalidateLoadedImageHighLight();
                    //getLoadedRaw().computeLoadedImageHighlight();
                setButtonAccordingToImage();
                afficheImage(true);
           }          
        }
    }

    public void setWhiteBalance() {

        RawReader rr = getLoadedRaw();

        if ( rr == null) {
            return;
        }
        if ( !rr.hasFinished()) {
            return;
        }
        
        int orientation = rr.getOrientation();

        float ev = rr.getEv();

        RawReader daylight_raw = rr;

        daylight_raw.setOrientationAndEvAndRGB(orientation, ev, parent.current_white.red, parent.current_white.green, parent.current_white.blue, false);

        daylight_raw.prepare();
        //daylight_raw.setPriority(Thread.NORM_PRIORITY);
        daylight_raw.go();
        //parent.addRunningTask();                
    }

    public void setWhiteBalanceDefault() {

        RawReader rr = getLoadedRaw();

        if ( rr != null) {
           if ( rr.hasFinished()) {
               int orientation = rr.getOrientation();

               float ev = rr.getEv();

               RawReader daylight_raw = rr;

               daylight_raw.setOrientationAndEvAndRGB(orientation, ev, 0.0f, 0.0f, 0.0f, true);

               daylight_raw.prepare();
               //daylight_raw.setPriority(Thread.NORM_PRIORITY);
               daylight_raw.go();
                //parent.addRunningTask();
           }
        }
    }
    /*
    public void setRGB( float redArg, float greenArg, float blueArg) {
        red = redArg;
        green = greenArg;
        blue = blueArg;
    }
    */
    public void setNbCores(int nbCores) {
        parent.nb_cores = nbCores;
    }
    
    private RawReader getLoadedRaw() {
        return loadedRaw.get();
    }
    
    private void calibration() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        
        int image_height = dim.height;
        int image_width = dim.width;
        int imageType = BufferedImage.TYPE_INT_RGB;
        
        /*BufferedImage*/ image = new BufferedImage(image_width, image_height, imageType);

        int red_img = 255 <<16;
        int green_img = 255 <<8;
        int blue_img = 255;
        
        int rg_limit = image_width/3;
        int gb_limit = image_width*2/3;
        
        for ( int y=0; y< image_height; y++) {
            int x;
            for ( x=0; x< rg_limit; x++) {
                image.setRGB(x, y, red_img);
            }
            for ( ; x< gb_limit; x++) {
                image.setRGB(x, y, green_img);
            }
            for ( ; x<image_width; x++) {
                image.setRGB(x, y, blue_img);
            }
        }
        frame = new CalibrationFrame( this);
        setVisible(false);
        SwingUtilities.invokeLater(this);
    }
    
    public final float level = 0.1f;
    
    public Color getColor(BufferedImage buf, int x, int y) {
        
        Color point1 = new Color(buf.getRGB(x, y));
        Color point2 = new Color(buf.getRGB(x+1, y));
        Color point3 = new Color(buf.getRGB(x, y+1));
        Color point4 = new Color(buf.getRGB(x+1, y+1));
        
        int r = (point1.getRed() + point2.getRed() + point3.getRed() +point4.getRed())/4;
        int g =  (point1.getGreen() + point2.getGreen() + point3.getGreen() + point4.getGreen())/4;
        int b = (point1.getBlue() + point2.getBlue() + point3.getBlue() + point4.getBlue())/4;
        Color point = new Color( r, g, b);
        
        return point;
    }
    
    public void calibration2() {

        RawReader lr = loadedRaw.get();

        if ( lr == null)
            return;
        if ( !lr.hasFinished())
            return;
        BufferedImage img = lr.getLoadedImage();
        
        int width = img.getWidth();
        int height = img.getHeight();
        
        int x1 = width/3/2;
        int y1 = height/2;
        Color point_red = getColor(img, x1, y1);
        int red_ = point_red.getRed();
        int x2 = width/2;
        Color point_green = getColor( img, x2, y1);
        int green_ = point_green.getGreen();
        int x3 = width/6*5;
        Color point_blue = getColor( img, x3, y1);
        int blue_ = point_blue.getBlue();
        
        int x;
        for ( x = x1; x>0; x--) {
            Color point = getColor(img, x, y1);
            int red__ = point.getRed();
            if ( (double)red__/(double)red_ < level) {
                break;
            }
        }
        int x_start_red = x;
        
        for ( x = x1; x < width-1; x++) {
            Color point = getColor(img, x, y1);
            int red__ = point.getRed();
            if ( (double)red__/(double)red_ < level) {
                break;
            }            
        }
        int x_end_red = x;
        
        for ( x = x2; x < width-1; x++) {
            Color point = getColor( img, x, y1);
            int green__ = point.getGreen();
            if ( (double)green__/(double)green_ < level) {
                break;
            }
        }
        int x_end_green = x;
        
        for ( x = x3; x<width-1; x++) {
            Color point = getColor(img, x, y1);
            int blue__ = point.getBlue();
            if ( (double)blue__/(double)blue_ < level) {
                break;
            }
        }
        int x_end_blue = x;
        
        int y;
        for ( y = y1; y>0; y--) {
            Color point = getColor( img, x2, y);
            int green__ = point.getGreen();
            if ( (double)green__/(double)green_ < level) {
                break;
            }
        }
        int y_start = y;
        
        for ( y = y1; y<height-1; y++) {
            Color point = getColor( img, x2, y);
            int green__ = point.getGreen();
            if ( (double)green__/(double)green_ < level) {
                break;
            }            
        }
        int y_end = y;
        
    lr.calibrate(
            x_start_red, 
            x_end_red,
            x_end_green,
            x_end_blue,
            y_start,
            y_end);
    
            repaint();
    }
    
    public void run() {
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        gd.setFullScreenWindow(frame);        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem PNGCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem PNGX2CheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem PNGX4CheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem PNGX8CheckBoxMenuItem;
    private javax.swing.JMenuItem aProposMenuItem;
    private javax.swing.JMenu aideMenu;
    private javax.swing.JMenuItem ajouterMenuItem;
    private javax.swing.JToggleButton ajusterToggleButton;
    private javax.swing.JToggleButton ajusterToggleButton1;
    private javax.swing.JButton batchButton;
    private javax.swing.JButton batchButton1;
    private javax.swing.JMenuItem batchMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem calibration2MenuItem;
    private javax.swing.JMenuItem calibrationMenuItem;
    private javax.swing.JMenu compressionMenu;
    private javax.swing.JCheckBoxMenuItem constantSizeCheckBoxMenuItem;
    private javax.swing.JRadioButtonMenuItem cores1MenuItem;
    private javax.swing.JRadioButtonMenuItem cores2MenuItem;
    private javax.swing.JRadioButtonMenuItem cores3MenuItem;
    private javax.swing.JRadioButtonMenuItem cores4MenuItem;
    private javax.swing.JRadioButtonMenuItem cores8MenuItem;
    private javax.swing.JButton droiteButton;
    private javax.swing.JButton droiteButton1;
    private javax.swing.JButton expoMoinsButton;
    private javax.swing.JButton expoMoinsButton1;
    private javax.swing.JButton expoPlusButton;
    private javax.swing.JButton expoPlusButton1;
    private javax.swing.JButton exporterButton;
    private javax.swing.JButton exporterButton1;
    private javax.swing.JMenuItem exporterMenuItem;
    private javax.swing.JMenu fichierMenu;
    private javax.swing.JButton gaucheButton;
    private javax.swing.JButton gaucheButton1;
    private javax.swing.JToggleButton highlightButton;
    private javax.swing.JToggleButton highlightButton1;
    private javax.swing.JScrollPane imageScrollPane;
    private javax.swing.JCheckBoxMenuItem internetCheckBoxMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanelEast;
    private javax.swing.JPanel jPanelSouth;
    private javax.swing.JMenuItem modeEmploiMenuItem;
    private javax.swing.JMenu multicoreMenu;
    private javax.swing.JButton ouvrirButton;
    private javax.swing.JButton ouvrirButton1;
    private javax.swing.JMenuItem ouvrirMenuItem;
    private javax.swing.JButton quitterButton;
    private javax.swing.JButton quitterButton1;
    private javax.swing.JMenuItem quitterMenuItem;
    private javax.swing.JCheckBoxMenuItem stockageCheckBoxMenuItem;
    private javax.swing.JButton suivantButton;
    private javax.swing.JButton suivantButton1;
    private javax.swing.JMenu whiteBalanceMenu;
    // End of variables declaration//GEN-END:variables

    
}
