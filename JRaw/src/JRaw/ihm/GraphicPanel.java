/*
 * GraphicPanel.java
 *
 * Created on 26 mars 2006, 21:49
 */

package JRaw.ihm;

import JRaw.GraphicTools;
import JRaw.LoadedImageI;
import java.awt.AWTEvent;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;

/**
 *
 * @author  FabienneYves
 */
public class GraphicPanel extends javax.swing.JPanel {
    boolean isInvalidated = true;
    LoadedImageI mjf = null;
    boolean highlight;
    Rectangle rectImageBounds = null;
    Image scaledImage = null;
    Image nextIndexScaledImage = null;
    public int nextIndex;
    BufferedImage sourceImage = null;
    
    /** Creates new form GraphicPanel */
    public GraphicPanel( LoadedImageI mjfArg, boolean highlightArg) {
        highlight = highlightArg;
        mjf = mjfArg;
        initComponents();
    }
    
    public void setHighLight( boolean highlightArg) {
        highlight = highlightArg;        
    }
    
    public void setNextIndexScaledImage( Image image, int index) {
        nextIndexScaledImage = image;
        nextIndex = index;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setDoubleBuffered(false);
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents


    public void invalidateImage() {
        isInvalidated = true;
    }
    

    public synchronized void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        int new_width = getWidth();
        int new_height = getHeight();
                
        BufferedImage viewingImage = mjf.getLoadedImage();
        if ( viewingImage == null)
            return;

        Graphics2D gr2D = (Graphics2D) g;
        
        RenderingHints rh = new RenderingHints( RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        rh.add(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON));
        rh.add(new RenderingHints(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC));
        
        //gr2D.setRenderingHints(rh);
        
        if( mjf.getParentApplication().isFitted) {
            if ( highlight) {
                GraphicTools.drawImage(gr2D, viewingImage, new_width, new_height);
            }
            else {
                int image_width = viewingImage.getWidth(null);
                int image_height = viewingImage.getHeight(null);
        
                Rectangle rect = GraphicTools.computeImageBounds( image_width, image_height, new_width, new_height);
                
                if ( 
                        rectImageBounds == null 
                        || rect.width != rectImageBounds.width 
                        || rect.height != rectImageBounds.height 
                        || scaledImage == null 
                        || sourceImage != viewingImage 
                        || isInvalidated
                        ) {
                    if ( 
                            nextIndexScaledImage != null
                            && nextIndex == mjf.getLoadedIndex()
                            && nextIndexScaledImage.getWidth(this) == rect.width
                            && nextIndexScaledImage.getHeight(this) == rect.height
                            ) {
                        scaledImage = nextIndexScaledImage;
                    }
                    else {
                        //long start = System.nanoTime();
                        scaledImage = viewingImage.getScaledInstance( rect.width, rect.height, Image.SCALE_AREA_AVERAGING);
                        //double delta_ms = ( System.nanoTime() - start)/1.0e6;
                        //System.out.println("_______________________getScaledInstance(), dt = "+delta_ms+" ms");
                    }
                    sourceImage = viewingImage;
                    isInvalidated = false;                    
                }
                rectImageBounds = rect;
                 
                        //long start = System.nanoTime();
                gr2D.drawImage(scaledImage, rect.x, rect.y, null);
                        //double delta_ms = ( System.nanoTime() - start)/1.0e6;
                        //System.out.println("_______________________drawImage(), dt = "+delta_ms+" ms");
            }
        }
        else {
            Boolean flag = g.drawImage(viewingImage,0,0, null);
        }
        
        return;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
